'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const bodyParser = require("body-parser");
const methodOverride = require("method-override");
const compression = require("compression");
const helmet = require("helmet");
const init_sequelize_1 = require("./db/init-sequelize");
const controller_1 = require("./controllers/controller");
const InternalServerError_1 = require("./jsonapi/errors/InternalServerError");
const validate_content_type_1 = require("./jsonapi/middleware/validate-content-type");
const validate_request_body_1 = require("./jsonapi/middleware/validate-request-body");
const not_found_handler_1 = require("./jsonapi/middleware/not-found-handler");
const db = init_sequelize_1.default();
const defineModels = require('./models/models');
const Models = defineModels(db);
const Route = require('./route/route');
// Constants
const PORT = 3000;
// App
const app = express();
/**
 * Log errors
 *
 * @param {mixed} err An error, if any
 * @param {Express.Request} req The Express request
 * @param {Express.Response} res The Express response
 * @param {Function} next The next Express handler/middleware
 */
function logErrors(err, req, res, next) {
    if (Array.isArray(err)) {
        err.forEach(error => {
            console.error(error.message);
            console.error(error.stack);
        });
    }
    else {
        console.error(err.message);
        console.error(err.stack);
    }
    next(err, req, res, next);
}
/**
 * Render an internal server error to the client
 *
 * @param {mixed} err An error, if any
 * @param {Express.Request} req The Express request
 * @param {Express.Response} res The Express response
 * @param {Function} next The next Express handler/middleware
 */
function clientErrorHandler(err, req, res, next) {
    res.status(500).json({
        errors: [
            new InternalServerError_1.default()
        ]
    });
}
// Middleware
app.use(helmet());
app.use(bodyParser.urlencoded({
    extended: true
}));
app.use(bodyParser.json({
    type: 'application/vnd.api+json'
}));
app.use(methodOverride());
app.use(compression());
// Routes
app.get('/health', function (req, res) {
    res.send('Up.');
});
// Validate `Content-Type` request header
app.use(validate_content_type_1.default);
// Validate request body for PATCH and POST requests to routes under "/api"
app.use(validate_request_body_1.default);
// build routes
let UserRoute = new Route(app, Models.User, controller_1.default);
let PostRoute = new Route(app, Models.Post, controller_1.default);
UserRoute.initialize();
PostRoute.initialize();
app.use(not_found_handler_1.default);
app.use(logErrors);
app.use(clientErrorHandler);
app.listen(PORT);
console.log('Running on http://localhost:' + PORT);
// Export the application instance for testing
module.exports = {
    app: app,
    db: db,
    models: {
        user: Models.User,
        post: Models.Post
    }
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFVLENBQUMsQ0FBQztBQUN4RCxJQUFJLFNBQVMsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxvQkFBVSxDQUFDLENBQUM7QUFFeEQsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ3ZCLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUV2QixHQUFHLENBQUMsR0FBRyxDQUFDLDJCQUFlLENBQUMsQ0FBQztBQUN6QixHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ25CLEdBQUcsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUU1QixHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsOEJBQThCLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFFbkQsOENBQThDO0FBQzlDLE1BQU0sQ0FBQyxPQUFPLEdBQUc7SUFDZixHQUFHLEVBQUUsR0FBRztJQUNSLEVBQUUsRUFBRSxFQUFFO0lBQ04sTUFBTSxFQUFFO1FBQ04sSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1FBQ2pCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtLQUNsQjtDQUNGLENBQUMiLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmltcG9ydCBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTtcbmltcG9ydCBtZXRob2RPdmVycmlkZSA9IHJlcXVpcmUoJ21ldGhvZC1vdmVycmlkZScpO1xuaW1wb3J0IGNvbXByZXNzaW9uID0gcmVxdWlyZSgnY29tcHJlc3Npb24nKTtcbmltcG9ydCBoZWxtZXQgPSByZXF1aXJlKCdoZWxtZXQnKTtcbmltcG9ydCBpbml0U2VxdWVsaXplIGZyb20gJy4vZGIvaW5pdC1zZXF1ZWxpemUnO1xuaW1wb3J0IENvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVycy9jb250cm9sbGVyJztcbmltcG9ydCBJbnRlcm5hbFNlcnZlckVycm9yIGZyb20gJy4vanNvbmFwaS9lcnJvcnMvSW50ZXJuYWxTZXJ2ZXJFcnJvcic7XG5pbXBvcnQgSnNvbkFwaU1pZGRsZXdhcmVWYWxpZGF0ZUNvbnRlbnRUeXBlIGZyb20gJy4vanNvbmFwaS9taWRkbGV3YXJlL3ZhbGlkYXRlLWNvbnRlbnQtdHlwZSc7XG5pbXBvcnQgSnNvbkFwaU1pZGRsZXdhcmVWYWxpZGF0ZVJlcXVlc3RCb2R5IGZyb20gJy4vanNvbmFwaS9taWRkbGV3YXJlL3ZhbGlkYXRlLXJlcXVlc3QtYm9keSc7XG5pbXBvcnQgbm90Rm91bmRIYW5kbGVyIGZyb20gJy4vanNvbmFwaS9taWRkbGV3YXJlL25vdC1mb3VuZC1oYW5kbGVyJztcblxuY29uc3QgZGIgPSBpbml0U2VxdWVsaXplKCk7XG5jb25zdCBkZWZpbmVNb2RlbHMgPSByZXF1aXJlKCcuL21vZGVscy9tb2RlbHMnKTtcbmNvbnN0IE1vZGVscyA9IGRlZmluZU1vZGVscyhkYik7XG5cbmNvbnN0IFJvdXRlID0gcmVxdWlyZSgnLi9yb3V0ZS9yb3V0ZScpO1xuXG4vLyBDb25zdGFudHNcbmNvbnN0IFBPUlQgPSAzMDAwO1xuXG4vLyBBcHBcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcblxuLyoqXG4gKiBMb2cgZXJyb3JzXG4gKlxuICogQHBhcmFtIHttaXhlZH0gZXJyIEFuIGVycm9yLCBpZiBhbnlcbiAqIEBwYXJhbSB7RXhwcmVzcy5SZXF1ZXN0fSByZXEgVGhlIEV4cHJlc3MgcmVxdWVzdFxuICogQHBhcmFtIHtFeHByZXNzLlJlc3BvbnNlfSByZXMgVGhlIEV4cHJlc3MgcmVzcG9uc2VcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHQgVGhlIG5leHQgRXhwcmVzcyBoYW5kbGVyL21pZGRsZXdhcmVcbiAqL1xuZnVuY3Rpb24gbG9nRXJyb3JzKGVyciwgcmVxLCByZXMsIG5leHQpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXJyKSkge1xuICAgIGVyci5mb3JFYWNoKGVycm9yID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yLnN0YWNrKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmVycm9yKGVyci5tZXNzYWdlKTtcbiAgICBjb25zb2xlLmVycm9yKGVyci5zdGFjayk7XG4gIH1cbiAgbmV4dChlcnIsIHJlcSwgcmVzLCBuZXh0KTtcbn1cblxuLyoqXG4gKiBSZW5kZXIgYW4gaW50ZXJuYWwgc2VydmVyIGVycm9yIHRvIHRoZSBjbGllbnRcbiAqXG4gKiBAcGFyYW0ge21peGVkfSBlcnIgQW4gZXJyb3IsIGlmIGFueVxuICogQHBhcmFtIHtFeHByZXNzLlJlcXVlc3R9IHJlcSBUaGUgRXhwcmVzcyByZXF1ZXN0XG4gKiBAcGFyYW0ge0V4cHJlc3MuUmVzcG9uc2V9IHJlcyBUaGUgRXhwcmVzcyByZXNwb25zZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dCBUaGUgbmV4dCBFeHByZXNzIGhhbmRsZXIvbWlkZGxld2FyZVxuICovXG5mdW5jdGlvbiBjbGllbnRFcnJvckhhbmRsZXIoZXJyLCByZXEsIHJlcywgbmV4dCkgeyAvL2pzaGludCBpZ25vcmU6bGluZVxuICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgZXJyb3JzOiBbXG4gICAgICBuZXcgSW50ZXJuYWxTZXJ2ZXJFcnJvcigpXG4gICAgXVxuICB9KTtcbn1cblxuLy8gTWlkZGxld2FyZVxuYXBwLnVzZShoZWxtZXQoKSk7XG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7XG4gIGV4dGVuZGVkOiB0cnVlXG59KSk7XG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbih7XG4gIHR5cGU6ICdhcHBsaWNhdGlvbi92bmQuYXBpK2pzb24nXG59KSk7XG5hcHAudXNlKG1ldGhvZE92ZXJyaWRlKCkpO1xuYXBwLnVzZShjb21wcmVzc2lvbigpKTtcblxuLy8gUm91dGVzXG5hcHAuZ2V0KCcvaGVhbHRoJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gIHJlcy5zZW5kKCdVcC4nKTtcbn0pO1xuXG4vLyBWYWxpZGF0ZSBgQ29udGVudC1UeXBlYCByZXF1ZXN0IGhlYWRlclxuYXBwLnVzZShKc29uQXBpTWlkZGxld2FyZVZhbGlkYXRlQ29udGVudFR5cGUpO1xuXG4vLyBWYWxpZGF0ZSByZXF1ZXN0IGJvZHkgZm9yIFBBVENIIGFuZCBQT1NUIHJlcXVlc3RzIHRvIHJvdXRlcyB1bmRlciBcIi9hcGlcIlxuYXBwLnVzZShKc29uQXBpTWlkZGxld2FyZVZhbGlkYXRlUmVxdWVzdEJvZHkpO1xuXG4vLyBidWlsZCByb3V0ZXNcbmxldCBVc2VyUm91dGUgPSBuZXcgUm91dGUoYXBwLCBNb2RlbHMuVXNlciwgQ29udHJvbGxlcik7XG5sZXQgUG9zdFJvdXRlID0gbmV3IFJvdXRlKGFwcCwgTW9kZWxzLlBvc3QsIENvbnRyb2xsZXIpO1xuXG5Vc2VyUm91dGUuaW5pdGlhbGl6ZSgpO1xuUG9zdFJvdXRlLmluaXRpYWxpemUoKTtcblxuYXBwLnVzZShub3RGb3VuZEhhbmRsZXIpO1xuYXBwLnVzZShsb2dFcnJvcnMpO1xuYXBwLnVzZShjbGllbnRFcnJvckhhbmRsZXIpO1xuXG5hcHAubGlzdGVuKFBPUlQpO1xuY29uc29sZS5sb2coJ1J1bm5pbmcgb24gaHR0cDovL2xvY2FsaG9zdDonICsgUE9SVCk7XG5cbi8vIEV4cG9ydCB0aGUgYXBwbGljYXRpb24gaW5zdGFuY2UgZm9yIHRlc3Rpbmdcbm1vZHVsZS5leHBvcnRzID0ge1xuICBhcHA6IGFwcCxcbiAgZGI6IGRiLFxuICBtb2RlbHM6IHtcbiAgICB1c2VyOiBNb2RlbHMuVXNlcixcbiAgICBwb3N0OiBNb2RlbHMuUG9zdFxuICB9XG59O1xuIl19
